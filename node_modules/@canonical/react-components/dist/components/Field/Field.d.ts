import type { ReactNode } from "react";
import type { ClassName } from "../../types";
/**
 * The props for the Field component.
 */
export declare type Props = {
    /**
     * The content for caution validation.
     */
    caution?: ReactNode;
    /**
     * The content of the Field component.
     */
    children?: ReactNode;
    /**
     * Optional class(es) to pass to the Field wrapper div.
     */
    className?: ClassName;
    /**
     * The content for error validation.
     */
    error?: ReactNode;
    /**
     * The id of the input this Field component is controlling.
     */
    forId?: string;
    /**
     * Help text to show below the field.
     */
    help?: ReactNode;
    /**
     * Optional class(es) to pass to the help text element.
     */
    helpClassName?: ReactNode;
    /**
     * An id to give to the help element.
     */
    helpId?: string;
    /**
     * Whether the component is wrapping a select element.
     */
    isSelect?: boolean;
    /**
     * Whether the component is wrapping a checkbox or radio element.
     */
    isTickElement?: boolean;
    /**
     * The label for the field.
     */
    label?: ReactNode;
    /**
     * Optional class(es) to pass to the label component.
     */
    labelClassName?: string;
    /**
     * Whether the label should show before the input.
     */
    labelFirst?: boolean;
    /**
     * Whether the field is required.
     */
    required?: boolean;
    /**
     * Whether the form field should have a stacked appearance.
     */
    stacked?: boolean;
    /**
     * The content for success validation.
     */
    success?: ReactNode;
    /**
     * An id to give to the caution, error or success element.
     */
    validationId?: string;
};
declare const Field: ({ caution, children, className, error, forId, help, helpClassName, helpId, isSelect, isTickElement, label, labelClassName, labelFirst, required, stacked, success, validationId, }: Props) => JSX.Element;
export default Field;
