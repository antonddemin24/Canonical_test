"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _Label = _interopRequireDefault(require("../Label"));

var _Col = _interopRequireDefault(require("../Col"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var generateHelpText = function generateHelpText(_ref) {
  var help = _ref.help,
      helpId = _ref.helpId,
      helpClassName = _ref.helpClassName,
      isTickElement = _ref.isTickElement;
  return help ? /*#__PURE__*/_react.default.createElement("p", {
    className: (0, _classnames.default)("p-form-help-text", helpClassName, {
      "is-tick-element": isTickElement
    }),
    id: helpId
  }, help) : null;
};

var generateError = function generateError(error, caution, success, validationId) {
  if (!error && !caution && !success) {
    return null;
  }

  var messageType = error && "Error" || caution && "Caution" || success && "Success";
  return /*#__PURE__*/_react.default.createElement("p", {
    className: "p-form-validation__message",
    id: validationId
  }, /*#__PURE__*/_react.default.createElement("strong", null, messageType, ":"), " ", error || caution || success);
};

var generateLabel = function generateLabel(forId, required, label, labelClassName, stacked) {
  if (!label) {
    return null;
  }

  var labelNode = /*#__PURE__*/_react.default.createElement(_Label.default, {
    className: labelClassName,
    forId: forId,
    required: required
  }, label);

  if (stacked) {
    return /*#__PURE__*/_react.default.createElement(_Col.default, {
      size: 4
    }, labelNode);
  }

  return labelNode;
};

var generateContent = function generateContent(_ref2) {
  var isSelect = _ref2.isSelect,
      children = _ref2.children,
      labelFirst = _ref2.labelFirst,
      labelNode = _ref2.labelNode,
      help = _ref2.help,
      helpClassName = _ref2.helpClassName,
      error = _ref2.error,
      caution = _ref2.caution,
      success = _ref2.success,
      validationId = _ref2.validationId,
      helpId = _ref2.helpId,
      isTickElement = _ref2.isTickElement;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "p-form__control u-clearfix"
  }, isSelect ? /*#__PURE__*/_react.default.createElement("div", {
    className: "p-form-validation__select-wrapper"
  }, children) : children, !labelFirst && labelNode, generateHelpText({
    helpId: helpId,
    help: help,
    helpClassName: helpClassName,
    isTickElement: isTickElement
  }), generateError(error, caution, success, validationId));
};

var Field = function Field(_ref3) {
  var caution = _ref3.caution,
      children = _ref3.children,
      className = _ref3.className,
      error = _ref3.error,
      forId = _ref3.forId,
      help = _ref3.help,
      helpClassName = _ref3.helpClassName,
      helpId = _ref3.helpId,
      isSelect = _ref3.isSelect,
      isTickElement = _ref3.isTickElement,
      label = _ref3.label,
      labelClassName = _ref3.labelClassName,
      _ref3$labelFirst = _ref3.labelFirst,
      labelFirst = _ref3$labelFirst === void 0 ? true : _ref3$labelFirst,
      required = _ref3.required,
      stacked = _ref3.stacked,
      success = _ref3.success,
      validationId = _ref3.validationId;
  var labelNode = generateLabel(forId, required, label, labelClassName, stacked);
  var content = generateContent({
    isSelect: isSelect,
    isTickElement: isTickElement,
    children: children,
    labelFirst: labelFirst,
    labelNode: labelNode,
    help: help,
    helpClassName: helpClassName,
    error: error,
    caution: caution,
    success: success,
    validationId: validationId,
    helpId: helpId
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)("p-form__group", "p-form-validation", className, {
      "is-error": error,
      "is-caution": caution,
      "is-success": success,
      row: stacked
    })
  }, labelFirst && labelNode, stacked ? /*#__PURE__*/_react.default.createElement(_Col.default, {
    size: 8
  }, content) : content);
};

var _default = Field;
exports.default = _default;