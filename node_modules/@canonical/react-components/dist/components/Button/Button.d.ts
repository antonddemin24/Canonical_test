import type { ButtonHTMLAttributes, ComponentType, ElementType, MouseEventHandler, ReactNode } from "react";
import type { ClassName, ValueOf } from "../../types";
export declare const ButtonAppearance: {
    readonly BASE: "base";
    readonly BRAND: "brand";
    readonly DEFAULT: "";
    readonly LINK: "link";
    readonly NEGATIVE: "negative";
    readonly POSITIVE: "positive";
};
/**
 * The type of the Button props.
 * @template P - The type of the props if providing a component to `element`
 */
export declare type Props<P = null> = {
    /**
     * The appearance of the button.
     */
    appearance?: ValueOf<typeof ButtonAppearance> | string;
    /**
     * The content of the button.
     */
    children?: ReactNode;
    /**
     * Optional class(es) to pass to the button element.
     */
    className?: ClassName;
    /**
     * Whether the button should have dense padding.
     */
    dense?: boolean;
    /**
     * Whether the button should be disabled.
     */
    disabled?: boolean;
    /**
     * Optional element or component to use instead of `button`.
     */
    element?: ElementType | ComponentType<P>;
    /**
     * Whether the button has an icon in the content.
     */
    hasIcon?: boolean;
    /**
     * Whether the button should display inline.
     */
    inline?: boolean;
    /**
     * Function for handling button click event.
     */
    onClick?: MouseEventHandler<HTMLButtonElement>;
    /**
     * Whether the button should be small.
     */
    small?: boolean;
} & (Omit<ButtonHTMLAttributes<HTMLButtonElement>, "onClick"> | P);
/**
 * A component for the Vanilla button.
 * @template P - The type of the props if providing a component to `element`
 */
declare const Button: <P>({ appearance, children, className, dense, disabled, element: Component, hasIcon, inline, onClick, small, ...buttonProps }: Props<P>) => JSX.Element;
export default Button;
