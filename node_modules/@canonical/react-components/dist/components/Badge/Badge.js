"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BadgeType = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _excluded = ["value", "badgeType", "className", "isNegative"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var BadgeType = {
  ROUNDED_LARGE_NUMBER: "ROUNDED_LARGE_NUMBER",
  UNDEFINED_LARGE_NUMBER: "UNDEFINED_LARGE_NUMBER"
};
/**
 * The props for the Badge component.
 */

exports.BadgeType = BadgeType;
var MAX_VAL = 999;
var units = ["", "k", "M", "B", "T"];

var round = function round(value) {
  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  if (value < 1000) {
    var truncatedValue = Number(value.toString().slice(0, 3));
    return "".concat(truncatedValue).concat(units[unit]);
  }

  if (unit >= units.length - 1) {
    return "999T";
  }

  var newValue = value / 1000;
  return round(newValue, unit + 1);
};

var clamp = function clamp(value) {
  if (value > MAX_VAL) {
    return "".concat(MAX_VAL, "+");
  }

  return value;
};

var Badge = function Badge(_ref) {
  var _classNames;

  var value = _ref.value,
      _ref$badgeType = _ref.badgeType,
      badgeType = _ref$badgeType === void 0 ? BadgeType.UNDEFINED_LARGE_NUMBER : _ref$badgeType,
      className = _ref.className,
      isNegative = _ref.isNegative,
      spanProps = _objectWithoutProperties(_ref, _excluded);

  var badgeClassName = (0, _classnames.default)((_classNames = {}, _defineProperty(_classNames, "p-badge--negative", !!isNegative), _defineProperty(_classNames, "p-badge", !isNegative), _classNames), className);
  var safeValue = Math.round(value);

  if (value < 0) {
    console.error("The value used in the badge should be positive");
    safeValue = 0;
  }

  var formattedValue = badgeType === BadgeType.ROUNDED_LARGE_NUMBER ? round(safeValue) : clamp(safeValue);
  return /*#__PURE__*/_react.default.createElement("span", _extends({}, spanProps, {
    className: badgeClassName
  }), formattedValue);
};

var _default = Badge;
exports.default = _default;