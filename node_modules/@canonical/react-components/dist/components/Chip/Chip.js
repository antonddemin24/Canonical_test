"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ChipType = void 0;

var _react = _interopRequireDefault(require("react"));

var _utils = require("../../utils");

var _classnames = _interopRequireDefault(require("classnames"));

var _excluded = ["appearance", "lead", "onClick", "onDismiss", "quoteValue", "selected", "subString", "value"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ChipType = {
  CAUTION: "caution",
  INFORMATION: "information",
  NEGATIVE: "negative",
  POSITIVE: "positive"
};
exports.ChipType = ChipType;

var Chip = function Chip(_ref) {
  var _classNames;

  var appearance = _ref.appearance,
      _ref$lead = _ref.lead,
      lead = _ref$lead === void 0 ? "" : _ref$lead,
      onClick = _ref.onClick,
      onDismiss = _ref.onDismiss,
      quoteValue = _ref.quoteValue,
      selected = _ref.selected,
      _ref$subString = _ref.subString,
      subString = _ref$subString === void 0 ? "" : _ref$subString,
      value = _ref.value,
      props = _objectWithoutProperties(_ref, _excluded);

  // When user tabs over chip and presses Enter or Space key, chip will trigger
  // click functionality
  var _onKeyDown = function onKeyDown(e) {
    // The " " value is what is returned for the spacebar
    if (e.key === " " || e.key === "Enter") {
      if (typeof onClick === "function") {
        onClick({
          lead: lead,
          value: value
        });
      }
    }
  };

  var chipValue = (0, _utils.highlightSubString)(value, subString).text;

  var chipContent = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, lead && /*#__PURE__*/_react.default.createElement("span", {
    className: "p-chip__lead"
  }, lead.toUpperCase()), /*#__PURE__*/_react.default.createElement("span", {
    className: "p-chip__value",
    dangerouslySetInnerHTML: {
      __html: quoteValue ? "'".concat(chipValue, "'") : chipValue
    }
  }));

  var chipClassName = (0, _classnames.default)((_classNames = {}, _defineProperty(_classNames, "p-chip--".concat(appearance), !!appearance), _defineProperty(_classNames, "p-chip", !appearance), _classNames), props.className);

  if (onDismiss) {
    return /*#__PURE__*/_react.default.createElement("span", _extends({}, props, {
      className: chipClassName
    }), chipContent, /*#__PURE__*/_react.default.createElement("button", {
      className: "p-chip__dismiss",
      onClick: onDismiss,
      type: "button"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "p-icon--close"
    }, "Dismiss")));
  } else {
    return /*#__PURE__*/_react.default.createElement("button", _extends({}, props, {
      "aria-pressed": selected,
      className: chipClassName,
      onClick: onClick,
      onKeyDown: function onKeyDown(e) {
        return _onKeyDown(e);
      },
      type: "button"
    }), chipContent);
  }
};

var _default = Chip;
exports.default = _default;