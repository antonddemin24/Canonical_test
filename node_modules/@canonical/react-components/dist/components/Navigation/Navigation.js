"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _NavigationLink = _interopRequireDefault(require("./NavigationLink"));

var _NavigationMenu = _interopRequireDefault(require("./NavigationMenu"));

var _SearchBox = _interopRequireDefault(require("../SearchBox"));

var _hooks = require("../../hooks");

var _enums = require("../../enums");

var _excluded = ["url", "src", "title", "icon", "aria-current", "aria-label"],
    _excluded2 = ["fullWidth", "generateLink", "items", "itemsRight", "leftNavProps", "logo", "navProps", "rightNavProps", "searchProps", "theme"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Narrow the type of the nav item to a NavMenu.
 */
var isMenu = function isMenu(item) {
  return "items" in item;
};
/**
 * Narrow the type of the logo prop to LogoProps.
 */


var isLogoProps = function isLogoProps(logo) {
  return ! /*#__PURE__*/(0, _react.isValidElement)(logo);
};
/**
 * Display the standard logo if the props were provided otherwise display the
 * full element provided.
 */


var generateLogo = function generateLogo(logo, generateLink) {
  if (isLogoProps(logo)) {
    var url = logo.url,
        src = logo.src,
        title = logo.title,
        icon = logo.icon,
        ariaCurrent = logo["aria-current"],
        ariaLabel = logo["aria-label"],
        logoProps = _objectWithoutProperties(logo, _excluded);

    var content = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "p-navigation__logo-tag"
    }, icon !== null && icon !== void 0 ? icon : /*#__PURE__*/_react.default.createElement("img", {
      className: "p-navigation__logo-icon",
      src: src,
      alt: ""
    })), /*#__PURE__*/_react.default.createElement("span", {
      className: "p-navigation__logo-title"
    }, title));

    return /*#__PURE__*/_react.default.createElement("div", _extends({
      className: "p-navigation__tagged-logo"
    }, logoProps), /*#__PURE__*/_react.default.createElement(_NavigationLink.default, {
      generateLink: generateLink,
      link: {
        "aria-label": ariaLabel,
        className: "p-navigation__link",
        isSelected: !!ariaCurrent,
        label: content,
        url: url
      }
    }));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "p-navigation__logo"
  }, logo);
};
/**
 * Generate the JSX for a set of nav items. This will map the items to menus,
 * links or generated components.
 * @param items The nav items to map to elements.
 * @param closeMobileMenu A function to close the mobile menu.
 * @param generateLink The optional function used to generate link components.
 * @returns A list of navigation item elements.
 */


var generateItems = function generateItems(items, closeMobileMenu, generateLink) {
  return items.map(function (item, i) {
    return isMenu(item) ? /*#__PURE__*/_react.default.createElement(_NavigationMenu.default, _extends({}, item, {
      generateLink: generateLink,
      key: i
    })) : /*#__PURE__*/_react.default.createElement("li", {
      className: (0, _classnames.default)("p-navigation__item", {
        "is-selected": item.isSelected
      }),
      key: i
    }, /*#__PURE__*/_react.default.createElement(_NavigationLink.default, {
      generateLink: generateLink,
      link: _objectSpread(_objectSpread({}, item), {}, {
        className: (0, _classnames.default)("p-navigation__link", item.className),
        onClick: function onClick(evt) {
          var _item$onClick;

          (_item$onClick = item.onClick) === null || _item$onClick === void 0 ? void 0 : _item$onClick.call(item, evt);
          closeMobileMenu();
        }
      })
    }));
  });
};

var Navigation = function Navigation(_ref) {
  var fullWidth = _ref.fullWidth,
      generateLink = _ref.generateLink,
      items = _ref.items,
      itemsRight = _ref.itemsRight,
      leftNavProps = _ref.leftNavProps,
      logo = _ref.logo,
      navProps = _ref.navProps,
      rightNavProps = _ref.rightNavProps,
      searchProps = _ref.searchProps,
      theme = _ref.theme,
      headerProps = _objectWithoutProperties(_ref, _excluded2);

  var searchRef = (0, _react.useRef)();

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      mobileMenuOpen = _useState2[0],
      setMobileMenuOpen = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      searchOpen = _useState4[0],
      setSearchOpen = _useState4[1]; // Display the search box if the props have been provided.


  var hasSearch = !!searchProps; // Close the mobile menu when the search box is opened.

  var toggleSearch = function toggleSearch(open) {
    setSearchOpen(open !== null && open !== void 0 ? open : !searchOpen);
    setMobileMenuOpen(false);
  }; // Close the search box when the mobile menu is opened.


  var toggleMobileMenu = function toggleMobileMenu() {
    setMobileMenuOpen(!mobileMenuOpen);
    setSearchOpen(false);
  };

  var closeMobileMenu = function closeMobileMenu() {
    if (mobileMenuOpen) {
      setMobileMenuOpen(false);
    }
  }; // Hide the searchbox when the escape key is pressed.


  (0, _hooks.useOnEscapePressed)(function () {
    return toggleSearch(false);
  });
  (0, _react.useEffect)(function () {
    if (searchOpen) {
      var _searchRef$current;

      // Focus on the searchbox when it appears. This done in a useEffect so
      // that the state change to display the searchbox has already occured and
      // the input has been made visible.
      (_searchRef$current = searchRef.current) === null || _searchRef$current === void 0 ? void 0 : _searchRef$current.focus();
    }
  }, [searchOpen]);
  return /*#__PURE__*/_react.default.createElement("header", _extends({}, headerProps, {
    className: (0, _classnames.default)("p-navigation", headerProps.className, {
      "has-menu-open": mobileMenuOpen,
      "has-search-open": searchOpen,
      "is-dark": theme === _enums.Theme.DARK,
      "is-light": theme === _enums.Theme.LIGHT
    })
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: fullWidth ? "p-navigation__row--full-width" : "p-navigation__row"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "p-navigation__banner"
  }, generateLogo(logo, generateLink), /*#__PURE__*/_react.default.createElement("ul", {
    className: "p-navigation__items"
  }, // When the header has a search box then this button is used to
  // toggle the search box at mobile size.
  hasSearch ? /*#__PURE__*/_react.default.createElement("li", {
    className: "p-navigation__item"
  }, /*#__PURE__*/_react.default.createElement("button", {
    "aria-label": "Search",
    className: "p-navigation__link--search-toggle",
    onClick: function onClick() {
      return toggleSearch();
    }
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "p-navigation__search-label"
  }, "Search"))) : null, (items === null || items === void 0 ? void 0 : items.length) > 0 || (itemsRight === null || itemsRight === void 0 ? void 0 : itemsRight.length) > 0 ? /*#__PURE__*/_react.default.createElement("li", {
    className: "p-navigation__item"
  }, /*#__PURE__*/_react.default.createElement("button", {
    "aria-pressed": mobileMenuOpen,
    className: "p-navigation__link",
    onClick: toggleMobileMenu
  }, mobileMenuOpen ? "Close menu" : "Menu")) : null)), /*#__PURE__*/_react.default.createElement("nav", _extends({
    className: "p-navigation__nav"
  }, navProps), /*#__PURE__*/_react.default.createElement("ul", _extends({
    className: "p-navigation__items"
  }, leftNavProps), items ? generateItems(items, closeMobileMenu, generateLink) : null), itemsRight || hasSearch ? /*#__PURE__*/_react.default.createElement("ul", _extends({
    className: "p-navigation__items"
  }, rightNavProps), itemsRight ? generateItems(itemsRight, closeMobileMenu, generateLink) : null, // When the header has a search box then this button is used to
  // toggle the search box at non-mobile size.
  hasSearch ? /*#__PURE__*/_react.default.createElement("li", {
    className: "p-navigation__item"
  }, /*#__PURE__*/_react.default.createElement("button", {
    "aria-label": "Search",
    className: "p-navigation__link--search-toggle",
    onClick: function onClick() {
      return toggleSearch();
    }
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "p-navigation__search-label"
  }, "Search"))) : null) : null, // When the header has a search box and the user has opened the search
  // form then this search box is displayed.
  hasSearch ? /*#__PURE__*/_react.default.createElement("div", {
    className: "p-navigation__search",
    "aria-hidden": !searchOpen
  }, /*#__PURE__*/_react.default.createElement(_SearchBox.default, {
    ref: searchRef
  })) : null)), // When the header has a search box and the user has opened the search
  // form then this element is overlayed over the whole page.
  hasSearch ? /*#__PURE__*/_react.default.createElement("div", {
    className: "p-navigation__search-overlay",
    onClick: function onClick() {
      return setSearchOpen(false);
    }
  }) : null);
};

var _default = Navigation;
exports.default = _default;