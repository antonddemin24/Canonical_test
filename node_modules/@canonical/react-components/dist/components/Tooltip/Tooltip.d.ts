import type { ReactNode } from "react";
import type { WindowFitment } from "../../hooks";
import type { ClassName, ValueOf } from "../../types";
export declare type CSSPosition = "static" | "absolute" | "fixed" | "relative" | "sticky" | "initial" | "inherit";
export declare type PositionStyle = {
    left: number;
    pointerEvents?: string;
    position: CSSPosition;
    top: number;
};
export declare const position: {
    readonly btmCenter: "btm-center";
    readonly btmLeft: "btm-left";
    readonly btmRight: "btm-right";
    readonly left: "left";
    readonly right: "right";
    readonly topCenter: "top-center";
    readonly topLeft: "top-left";
    readonly topRight: "top-right";
};
export declare type Position = ValueOf<typeof position>;
export declare type Props = {
    /**
     * Whether the tooltip should adjust to fit in the screen.
     */
    autoAdjust?: boolean;
    /**
     * Element on which to apply the tooltip.
     */
    children: ReactNode;
    /**
     * An optional class to apply to the wrapping element.
     */
    className?: ClassName;
    /**
     * Whether the tooltip should follow the mouse.
     */
    followMouse?: boolean;
    /**
     * Message to display when the element is hovered.
     */
    message?: ReactNode;
    /**
     * Position of the tooltip relative to the element.
     */
    position?: Position;
    /**
     * An optional class to apply to the element that wraps the children.
     */
    positionElementClassName?: string;
    /**
     * An optional class to apply to the tooltip message element.
     */
    tooltipClassName?: string;
};
export declare const adjustForWindow: (position: Position, fitsWindow: WindowFitment) => Position;
/**
 * A React component for Vanilla tooltips.
 * @param [autoAdjust=true] Whether the tooltip should adjust to fit in the screen.
 * @param children Element on which to apply the tooltip.
 * @param className An optional class to apply to the wrapping element.
 * @param [followMouse=false] Whether the tooltip should follow the mouse.
 * @param message Message to display when the element is hovered.
 * @param [position="top-left"] Position of the tooltip relative to the element.
 * @param positionElementClassName An optional class to apply to the element that wraps the children.
 * @param tooltipClassName An optional class to apply to the tooltip message element.
 */
declare const Tooltip: ({ autoAdjust, children, className, followMouse, message, position, positionElementClassName, tooltipClassName, }: Props) => JSX.Element;
export default Tooltip;
