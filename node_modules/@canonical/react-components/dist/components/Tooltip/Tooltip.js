"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.position = exports.default = exports.adjustForWindow = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _reactUseportal = _interopRequireDefault(require("react-useportal"));

var _hooks = require("../../hooks");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var position = {
  btmCenter: "btm-center",
  btmLeft: "btm-left",
  btmRight: "btm-right",
  left: "left",
  right: "right",
  topCenter: "top-center",
  topLeft: "top-left",
  topRight: "top-right"
};
exports.position = position;

var getPositionStyle = function getPositionStyle(pos, wrapperNode) {
  if (!wrapperNode) {
    return null;
  }

  var dimensions = wrapperNode.getBoundingClientRect();
  var x = dimensions.x,
      y = dimensions.y,
      height = dimensions.height,
      width = dimensions.width;
  var left = x + window.scrollX || 0;
  var top = y + window.scrollY || 0;

  switch (pos) {
    case "btm-center":
      left += width / 2;
      top += height;
      break;

    case "btm-left":
      top += height;
      break;

    case "btm-right":
      left += width;
      top += height;
      break;

    case "left":
      top += height / 2;
      break;

    case "right":
      left += width;
      top += height / 2;
      break;

    case "top-center":
      left += width / 2;
      break;

    case "top-left":
      break;

    case "top-right":
      left += width;
      break;

    default:
      break;
  }

  return {
    position: "absolute",
    left: left,
    top: top
  };
};

var adjustForWindow = function adjustForWindow(position, fitsWindow) {
  var newPosition = position;

  if (!fitsWindow.fromLeft.fitsLeft && newPosition === "left") {
    newPosition = "top-right";
  }

  if (!fitsWindow.fromRight.fitsRight && newPosition === "right") {
    newPosition = "top-left";
  }

  if (!fitsWindow.fromRight.fitsLeft && newPosition.endsWith("-right")) {
    newPosition = newPosition.replace("right", "left");
  }

  if (!fitsWindow.fromLeft.fitsRight && newPosition.endsWith("-left")) {
    newPosition = newPosition.replace("left", "right");
  }

  if (!fitsWindow.fromTop.fitsAbove && newPosition.startsWith("top")) {
    newPosition = newPosition.replace("top", "btm");
  }

  if (!fitsWindow.fromBottom.fitsBelow && newPosition.startsWith("btm")) {
    newPosition = newPosition.replace("btm", "top");
  }

  if (!fitsWindow.fromLeft.fitsRight && !fitsWindow.fromRight.fitsLeft && (newPosition.endsWith("-left") || newPosition.endsWith("-right"))) {
    newPosition = newPosition.replace("left", "center").replace("right", "center");
  }

  if (newPosition.endsWith("center") && (fitsWindow.fromCenter.fitsCentered.fitsRight || fitsWindow.fromCenter.fitsCentered.fitsLeft)) {
    if (!fitsWindow.fromCenter.fitsCentered.fitsRight) {
      newPosition = newPosition.replace("center", "right");
    }

    if (!fitsWindow.fromCenter.fitsCentered.fitsLeft) {
      newPosition = newPosition.replace("center", "left");
    }
  }

  return newPosition;
};
/**
 * A React component for Vanilla tooltips.
 * @param [autoAdjust=true] Whether the tooltip should adjust to fit in the screen.
 * @param children Element on which to apply the tooltip.
 * @param className An optional class to apply to the wrapping element.
 * @param [followMouse=false] Whether the tooltip should follow the mouse.
 * @param message Message to display when the element is hovered.
 * @param [position="top-left"] Position of the tooltip relative to the element.
 * @param positionElementClassName An optional class to apply to the element that wraps the children.
 * @param tooltipClassName An optional class to apply to the tooltip message element.
 */


exports.adjustForWindow = adjustForWindow;

var Tooltip = function Tooltip(_ref) {
  var _ref$autoAdjust = _ref.autoAdjust,
      autoAdjust = _ref$autoAdjust === void 0 ? true : _ref$autoAdjust,
      children = _ref.children,
      className = _ref.className,
      _ref$followMouse = _ref.followMouse,
      followMouse = _ref$followMouse === void 0 ? false : _ref$followMouse,
      message = _ref.message,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? "top-left" : _ref$position,
      positionElementClassName = _ref.positionElementClassName,
      tooltipClassName = _ref.tooltipClassName;
  var wrapperRef = (0, _react.useRef)(null);
  var messageRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(position),
      _useState2 = _slicedToArray(_useState, 2),
      adjustedPosition = _useState2[0],
      setAdjustedPosition = _useState2[1];

  var _useState3 = (0, _react.useState)({
    position: "absolute",
    // Initially position the tooltip of the screen in case it gets shown
    // before setting the position.
    left: -99999999999999,
    top: -99999999999999
  }),
      _useState4 = _slicedToArray(_useState3, 2),
      positionStyle = _useState4[0],
      setPositionStyle = _useState4[1];

  var _usePortal = (0, _reactUseportal.default)(),
      openPortal = _usePortal.openPortal,
      closePortal = _usePortal.closePortal,
      isOpen = _usePortal.isOpen,
      Portal = _usePortal.Portal;

  var tooltipId = (0, _hooks.useId)();
  (0, _react.useEffect)(function () {
    if (isOpen && !followMouse && wrapperRef.current) {
      // Position the tooltip when it becomes visible.
      setPositionStyle(getPositionStyle(adjustedPosition, wrapperRef.current));
    }
  }, [adjustedPosition, isOpen, followMouse]);
  var mouseHandler = (0, _react.useCallback)(function (evt) {
    // Set the position of the tooltip next to the mouse.
    setPositionStyle({
      // Don't allow the tooltip to block the mouse events.
      pointerEvents: "none",
      position: "absolute",
      left: evt.pageX,
      top: evt.pageY
    });
  }, []);
  var onUpdateWindowFitment = (0, _react.useCallback)(function (fitsWindow) {
    setAdjustedPosition(adjustForWindow(position, fitsWindow));
  }, [setAdjustedPosition, position]); // Handle mouse events.

  (0, _hooks.useListener)(wrapperRef.current, mouseHandler, "mousemove", true, followMouse && isOpen); // Handle adjusting the position of the tooltip so that it remains on screen.

  (0, _hooks.useWindowFitment)(messageRef.current, wrapperRef.current, onUpdateWindowFitment, 20, isOpen, autoAdjust && followMouse);
  var handleKeyPress = (0, _react.useCallback)(function (event) {
    if (event.key === "Escape") {
      closePortal();
    }
  }, [closePortal]);
  (0, _react.useEffect)(function () {
    window.addEventListener("keypress", handleKeyPress);
    return function () {
      window.removeEventListener("keypress", handleKeyPress);
    };
  }, [handleKeyPress]);

  var handleBlur = function handleBlur(e) {
    var _wrapperRef$current, _messageRef$current;

    // do not close if the focus is within the tooltip wrapper
    if (wrapperRef !== null && wrapperRef !== void 0 && (_wrapperRef$current = wrapperRef.current) !== null && _wrapperRef$current !== void 0 && _wrapperRef$current.contains(document.activeElement)) {
      return;
    }

    if (e.relatedTarget ? !((_messageRef$current = messageRef.current) !== null && _messageRef$current !== void 0 && _messageRef$current.contains(e.relatedTarget)) : e.target !== messageRef.current) {
      closePortal();
    }
  };

  var handleClick = function handleClick(e) {
    var _messageRef$current2;

    // ignore clicks within the tooltip message
    if ((_messageRef$current2 = messageRef.current) !== null && _messageRef$current2 !== void 0 && _messageRef$current2.contains(e.target)) {
      return;
    }

    e.target.focus();
    openPortal();
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, message ? /*#__PURE__*/_react.default.createElement("span", {
    className: className,
    onBlur: handleBlur,
    onClick: handleClick,
    onFocus: openPortal,
    onMouseOut: handleBlur,
    onMouseOver: openPortal
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: positionElementClassName,
    ref: wrapperRef,
    style: {
      display: "inline-block"
    }
  }, _react.default.Children.map(children, function (child) {
    return child && /*#__PURE__*/_react.default.isValidElement(child) ? /*#__PURE__*/_react.default.cloneElement(child, {
      "aria-describedby": tooltipId
    }) : child;
  })), /*#__PURE__*/_react.default.createElement(Portal, null, /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)("p-tooltip--".concat(adjustedPosition), "is-detached", {
      "u-off-screen": !isOpen
    }, tooltipClassName),
    "data-testid": "tooltip-portal",
    style: positionStyle
  }, /*#__PURE__*/_react.default.createElement("span", {
    role: "tooltip",
    className: "p-tooltip__message",
    ref: messageRef,
    id: tooltipId
  }, message)))) : /*#__PURE__*/_react.default.createElement("span", {
    className: className
  }, children));
};

var _default = Tooltip;
exports.default = _default;