"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _Button = _interopRequireDefault(require("../Button"));

var _Field = _interopRequireDefault(require("../Field"));

var _Label = _interopRequireDefault(require("../Label"));

var _hooks = require("../../hooks");

var _excluded = ["caution", "className", "error", "help", "id", "label", "readOnly", "required", "success", "type", "wrapperClassName"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var PasswordToggle = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var caution = _ref.caution,
      className = _ref.className,
      error = _ref.error,
      help = _ref.help,
      id = _ref.id,
      label = _ref.label,
      readOnly = _ref.readOnly,
      required = _ref.required,
      success = _ref.success,
      type = _ref.type,
      wrapperClassName = _ref.wrapperClassName,
      inputProps = _objectWithoutProperties(_ref, _excluded);

  var _useState = (0, _react.useState)(true),
      _useState2 = _slicedToArray(_useState, 2),
      isPassword = _useState2[0],
      setIsPassword = _useState2[1];

  var validationId = (0, _hooks.useId)();
  var helpId = (0, _hooks.useId)();
  var hasError = !!error;

  var togglePassword = function togglePassword() {
    if (isPassword) {
      setIsPassword(false);
    } else {
      setIsPassword(true);
    }
  };

  return /*#__PURE__*/_react.default.createElement(_Field.default, {
    caution: caution,
    className: wrapperClassName,
    error: error,
    help: help,
    helpId: helpId,
    required: required,
    success: success,
    validationId: validationId
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "p-form-password-toggle"
  }, /*#__PURE__*/_react.default.createElement(_Label.default, {
    forId: id,
    required: required
  }, label), /*#__PURE__*/_react.default.createElement(_Button.default, {
    appearance: "base",
    type: type ? type : "button",
    className: "u-no-margin--bottom",
    hasIcon: true,
    "aria-controls": id,
    "aria-live": "polite",
    onClick: function onClick() {
      return togglePassword();
    }
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "p-form-password-toggle__label"
  }, isPassword ? "Show" : "Hide"), /*#__PURE__*/_react.default.createElement("i", {
    className: isPassword ? "p-icon--show" : "p-icon--hide"
  }))), /*#__PURE__*/_react.default.createElement("input", _extends({
    "aria-describedby": help ? helpId : null,
    "aria-errormessage": hasError ? validationId : null,
    "aria-invalid": hasError,
    className: (0, _classnames.default)("p-form-validation__input", className),
    id: id,
    readOnly: readOnly,
    ref: ref,
    type: isPassword ? "password" : "text"
  }, inputProps)));
});

var _default = PasswordToggle;
exports.default = _default;