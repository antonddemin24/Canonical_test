"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Modal = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _useId = require("../../hooks/useId");

var _excluded = ["buttonRow", "children", "className", "close", "title"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Modal = function Modal(_ref) {
  var buttonRow = _ref.buttonRow,
      children = _ref.children,
      className = _ref.className,
      close = _ref.close,
      title = _ref.title,
      wrapperProps = _objectWithoutProperties(_ref, _excluded);

  // list of focusable selectors is based on this Stack Overflow answer:
  // https://stackoverflow.com/a/30753870/3732840
  var focusableElementSelectors = 'a[href]:not([tabindex="-1"]), button:not([disabled]), textarea:not([disabled]):not([tabindex="-1"]), input:not([disabled]):not([tabindex="-1"]), select:not([disabled]):not([tabindex="-1"]), area[href]:not([tabindex="-1"]), iframe:not([tabindex="-1"]), [tabindex]:not([tabindex="-1"]), [contentEditable=true]:not([tabindex="-1"])';
  var descriptionId = (0, _useId.useId)();
  var titleId = (0, _useId.useId)();
  var shouldClose = (0, _react.useRef)(false);
  var modalRef = (0, _react.useRef)(null);
  var focusableModalElements = (0, _react.useRef)(null);

  var handleTabKey = function handleTabKey(e) {
    if (focusableModalElements.current.length > 0) {
      var firstElement = focusableModalElements.current[0];
      var lastElement = focusableModalElements.current[focusableModalElements.current.length - 1];

      if (!e.shiftKey && document.activeElement === lastElement) {
        firstElement.focus();
        e.preventDefault();
      }

      if (e.shiftKey && document.activeElement === firstElement) {
        lastElement.focus();
        return e.preventDefault();
      }
    }
  };

  var keyListenersMap = new Map([[27, close], [9, handleTabKey]]);
  (0, _react.useEffect)(function () {
    modalRef.current.focus();
  }, [modalRef]);
  (0, _react.useEffect)(function () {
    var _focusableModalElemen;

    focusableModalElements.current = modalRef.current.querySelectorAll(focusableElementSelectors);
    (_focusableModalElemen = focusableModalElements.current[0]) === null || _focusableModalElemen === void 0 ? void 0 : _focusableModalElemen.focus();
  }, []);
  (0, _react.useEffect)(function () {
    var keyDown = function keyDown(e) {
      var listener = keyListenersMap.get(e.keyCode);
      return listener && listener(e);
    };

    document.addEventListener("keydown", keyDown);
    return function () {
      document.removeEventListener("keydown", keyDown);
    };
  });

  var handleContentOnMouseDown = function handleContentOnMouseDown() {
    shouldClose.current = false;
  };

  var handleContentOnMouseUp = function handleContentOnMouseUp() {
    shouldClose.current = false;
  };

  var handleOverlayOnMouseDown = function handleOverlayOnMouseDown(event) {
    if (event.target === modalRef.current) {
      shouldClose.current = true;
    }
  };

  var handleOverlayOnClick = function handleOverlayOnClick() {
    if (shouldClose.current) {
      close();
    }
  };

  return /*#__PURE__*/_react.default.createElement("div", _extends({
    className: (0, _classnames.default)("p-modal", className),
    onClick: handleOverlayOnClick,
    onMouseDown: handleOverlayOnMouseDown
  }, wrapperProps, {
    ref: modalRef
  }), /*#__PURE__*/_react.default.createElement("section", {
    className: "p-modal__dialog",
    role: "dialog",
    "aria-modal": "true",
    "aria-labelledby": titleId,
    "aria-describedby": descriptionId,
    onMouseDown: handleContentOnMouseDown,
    onMouseUp: handleContentOnMouseUp
  }, !!title && /*#__PURE__*/_react.default.createElement("header", {
    className: "p-modal__header"
  }, /*#__PURE__*/_react.default.createElement("h2", {
    className: "p-modal__title",
    id: titleId
  }, title), !!close && /*#__PURE__*/_react.default.createElement("button", {
    className: "p-modal__close",
    "aria-label": "Close active modal",
    onClick: close
  }, "Close")), /*#__PURE__*/_react.default.createElement("div", {
    id: descriptionId
  }, children), !!buttonRow && /*#__PURE__*/_react.default.createElement("footer", {
    className: "p-modal__footer"
  }, buttonRow)));
};

exports.Modal = Modal;
var _default = Modal;
exports.default = _default;