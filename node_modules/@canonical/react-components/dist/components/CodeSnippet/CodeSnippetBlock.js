"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodeSnippetBlockAppearance = void 0;
exports.default = CodeSnippetBlock;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _CodeSnippetDropdown = _interopRequireDefault(require("./CodeSnippetDropdown"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var CodeSnippetBlockAppearance = {
  LINUX_PROMPT: "linuxPrompt",
  NUMBERED: "numbered",
  URL: "url",
  WINDOWS_PROMPT: "windowsPrompt"
};
exports.CodeSnippetBlockAppearance = CodeSnippetBlockAppearance;

function CodeSnippetBlock(_ref) {
  var appearance = _ref.appearance,
      code = _ref.code,
      content = _ref.content,
      dropdowns = _ref.dropdowns,
      _ref$stacked = _ref.stacked,
      stacked = _ref$stacked === void 0 ? false : _ref$stacked,
      title = _ref.title,
      _ref$wrapLines = _ref.wrapLines,
      wrapLines = _ref$wrapLines === void 0 ? false : _ref$wrapLines;
  var className = "p-code-snippet__block";
  var isNumbered = appearance === CodeSnippetBlockAppearance.NUMBERED;
  var hasIcon = appearance === CodeSnippetBlockAppearance.LINUX_PROMPT || appearance === CodeSnippetBlockAppearance.WINDOWS_PROMPT || appearance === CodeSnippetBlockAppearance.URL;
  var numberedCode;

  if (isNumbered) {
    className += "--numbered"; // wrap code lines in spans (and preserve the whitespace)

    var lines = code.split(/\r?\n/);
    numberedCode = lines.map(function (line, i) {
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
        key: "p-code-snippet__line-".concat(i)
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "p-code-snippet__line"
      }, line), "\n");
    });
  } else if (hasIcon) {
    className += "--icon";
  }

  className = (0, _classnames.default)(className, {
    "is-windows-prompt": appearance === CodeSnippetBlockAppearance.WINDOWS_PROMPT,
    "is-url": appearance === CodeSnippetBlockAppearance.URL,
    "is-wrapped": wrapLines
  });
  var hasDropdowns = dropdowns && dropdowns.length;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (title || hasDropdowns) && /*#__PURE__*/_react.default.createElement("div", {
    className: "p-code-snippet__header ".concat(stacked ? "is-stacked" : "")
  }, /*#__PURE__*/_react.default.createElement("h5", {
    className: "p-code-snippet__title"
  }, title), hasDropdowns && /*#__PURE__*/_react.default.createElement("div", {
    className: "p-code-snippet__dropdowns"
  }, dropdowns.map(function (dropdown, i) {
    return /*#__PURE__*/_react.default.createElement(_CodeSnippetDropdown.default, _extends({}, dropdown, {
      key: "code-snippet-dropdown-".concat(i)
    }));
  }))), /*#__PURE__*/_react.default.createElement("pre", {
    className: className
  }, /*#__PURE__*/_react.default.createElement("code", null, isNumbered ? numberedCode : code)), content);
}