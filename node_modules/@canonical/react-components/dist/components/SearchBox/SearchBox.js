"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _excluded = ["autocomplete", "className", "disabled", "externallyControlled", "onChange", "onSearch", "placeholder", "value"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var SearchBox = /*#__PURE__*/_react.default.forwardRef(function (_ref, forwardedRef) {
  var _ref$autocomplete = _ref.autocomplete,
      autocomplete = _ref$autocomplete === void 0 ? "on" : _ref$autocomplete,
      className = _ref.className,
      disabled = _ref.disabled,
      externallyControlled = _ref.externallyControlled,
      _onChange = _ref.onChange,
      onSearch = _ref.onSearch,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? "Search" : _ref$placeholder,
      value = _ref.value,
      props = _objectWithoutProperties(_ref, _excluded);

  var internalRef = (0, _react.useRef)();

  var resetInput = function resetInput() {
    _onChange && _onChange("");

    if (internalRef.current) {
      internalRef.current.value = "";
    }
  };

  var triggerSearch = function triggerSearch() {
    onSearch && onSearch();
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)("p-search-box", className)
  }, /*#__PURE__*/_react.default.createElement("label", {
    className: "u-off-screen",
    htmlFor: "search"
  }, placeholder || "Search"), /*#__PURE__*/_react.default.createElement("input", _extends({
    autoComplete: autocomplete,
    className: "p-search-box__input",
    disabled: disabled,
    id: "search",
    name: "search",
    onChange: function onChange(evt) {
      return _onChange(evt.target.value);
    },
    placeholder: placeholder,
    ref: function ref(input) {
      internalRef.current = input; // Handle both function and object refs.

      if (typeof forwardedRef === "function") {
        forwardedRef(input);
      } else if (forwardedRef) {
        forwardedRef.current = input;
      }
    },
    type: "search",
    defaultValue: externallyControlled ? undefined : value,
    value: externallyControlled ? value : undefined
  }, props)), value && /*#__PURE__*/_react.default.createElement("button", {
    className: "p-search-box__reset",
    disabled: disabled,
    onClick: resetInput,
    type: "reset"
  }, /*#__PURE__*/_react.default.createElement(_Icon.default, {
    name: "close"
  }, "Clear search field")), /*#__PURE__*/_react.default.createElement("button", {
    className: "p-search-box__button",
    disabled: disabled,
    onClick: triggerSearch
  }, /*#__PURE__*/_react.default.createElement(_Icon.default, {
    name: "search"
  }, "Search")));
});

SearchBox.displayName = "SearchBox";
var _default = SearchBox;
exports.default = _default;