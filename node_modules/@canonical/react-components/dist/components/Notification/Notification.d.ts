import type { HTMLProps, ReactNode } from "react";
import type { ClassName, PropsWithSpread, ValueOf } from "../../types";
export declare const NotificationSeverity: {
    readonly CAUTION: "caution";
    readonly INFORMATION: "information";
    readonly NEGATIVE: "negative";
    readonly POSITIVE: "positive";
};
declare type NotificationAction = {
    label: string;
    onClick: () => void;
};
/**
 * The props for the Notification component.
 */
export declare type Props = PropsWithSpread<{
    /**
     * A list of up to two actions that the notification can perform.
     */
    actions?: NotificationAction[];
    /**
     * Whether the notification should not have a border.
     */
    borderless?: boolean;
    /**
     * The notification message content.
     */
    children?: ReactNode;
    /**
     * Optional class(es) to apply to the parent notification element.
     */
    className?: ClassName;
    /**
     * **Deprecated**. Use `onDismiss` instead.
     */
    close?: never;
    /**
     * Whether the title should display inline with the message.
     */
    inline?: boolean;
    /**
     * The function to run when dismissing/closing the notification.
     */
    onDismiss?: () => void;
    /**
     * The severity of the notification.
     */
    severity?: ValueOf<typeof NotificationSeverity>;
    /**
     * **Deprecated**. Use `title` instead.
     */
    status?: never;
    /**
     * The amount of time (in ms) until the notification is automatically dismissed.
     */
    timeout?: number;
    /**
     * A relevant timestamp for the notification, e.g. when it was created.
     */
    timestamp?: ReactNode;
    /**
     * The title of the notification.
     */
    title?: ReactNode;
    /**
     * **Deprecated**. Use `severity` instead.
     */
    type?: never;
}, HTMLProps<HTMLDivElement>>;
declare const Notification: ({ actions, borderless, children, className, close, inline, onDismiss, severity, status, timeout, timestamp, title, type, ...props }: Props) => JSX.Element;
export default Notification;
