"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _reactUseportal = _interopRequireDefault(require("react-useportal"));

var _hooks = require("../../hooks");

var _Button = _interopRequireDefault(require("../Button"));

var _ContextualMenuDropdown = _interopRequireDefault(require("./ContextualMenuDropdown"));

var _useId = require("../../hooks/useId");

var _excluded = ["autoAdjust", "children", "className", "closeOnEsc", "closeOnOutsideClick", "constrainPanelWidth", "dropdownClassName", "dropdownProps", "hasToggleIcon", "links", "onToggleMenu", "position", "positionNode", "toggleAppearance", "toggleClassName", "toggleDisabled", "toggleLabel", "toggleLabelFirst", "toggleProps", "visible"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Get the node to use for positioning the menu.
 * @param wrapper - The component's wrapping element.
 * @param positionNode - A positioning node, if supplied.
 * @return A node or null.
 */
var getPositionNode = function getPositionNode(wrapper, positionNode) {
  if (positionNode) {
    return positionNode;
  } else if (wrapper) {
    // We want to position the menu in relation to the toggle, if it exists.
    var toggle = wrapper.querySelector(".p-contextual-menu__toggle");
    return toggle || wrapper;
  }

  return null;
};
/**
 * Whether the positioning node is visible.
 * @param positionNode - The node that is used to position the menu.
 * @return Whether the positioning node is visible.
 */


var getPositionNodeVisible = function getPositionNodeVisible(positionNode) {
  return !positionNode || positionNode.offsetParent !== null;
};
/**
 * A component for the Vanilla contextual menu.
 * @template L - The type of the link props.
 * @param [autoAdjust=true] - Whether the menu should adjust to fit in the screen.
 * @param children - The menu content (if the links prop is not supplied).
 * @param className - An optional class to apply to the wrapping element.
 * @param [closeOnEsc=true] - Whether the menu should close when the escape key is pressed.
 * @param [closeOnOutsideClick=true] - Whether the menu should close when clicking outside the menu.
 * @param constrainPanelWidth - Whether the menu's width should match the toggle's width.
 * @param dropdownClassName - An optional class to apply to the dropdown.
 * @param hasToggleIcon - Whether the toggle should display a chevron icon.
 * @param links - A list of links to display in the menu (if the children prop is not supplied.)
 * @param onToggleMenu - A function to call when the menu is toggled.
 * @param [position="right"] - The position of the menu.
 * @param positionNode - An element to make the menu relative to.
 * @param toggleAppearance - The appearance of the toggle button.
 * @param toggleClassName - An class to apply to the toggle button.
 * @param toggleDisabled - Whether the toggle button should be disabled.
 * @param toggleLabel - The toggle button's label.
 * @param [toggleLabelFirst=true] - Whether the toggle lable or icon should appear first.
 * @param [visible=false] - Whether the menu should be visible.
 */


var ContextualMenu = function ContextualMenu(_ref) {
  var _ref$autoAdjust = _ref.autoAdjust,
      autoAdjust = _ref$autoAdjust === void 0 ? true : _ref$autoAdjust,
      children = _ref.children,
      className = _ref.className,
      _ref$closeOnEsc = _ref.closeOnEsc,
      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,
      _ref$closeOnOutsideCl = _ref.closeOnOutsideClick,
      closeOnOutsideClick = _ref$closeOnOutsideCl === void 0 ? true : _ref$closeOnOutsideCl,
      constrainPanelWidth = _ref.constrainPanelWidth,
      dropdownClassName = _ref.dropdownClassName,
      dropdownProps = _ref.dropdownProps,
      hasToggleIcon = _ref.hasToggleIcon,
      links = _ref.links,
      onToggleMenu = _ref.onToggleMenu,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? "right" : _ref$position,
      positionNode = _ref.positionNode,
      toggleAppearance = _ref.toggleAppearance,
      toggleClassName = _ref.toggleClassName,
      toggleDisabled = _ref.toggleDisabled,
      toggleLabel = _ref.toggleLabel,
      _ref$toggleLabelFirst = _ref.toggleLabelFirst,
      toggleLabelFirst = _ref$toggleLabelFirst === void 0 ? true : _ref$toggleLabelFirst,
      toggleProps = _ref.toggleProps,
      _ref$visible = _ref.visible,
      visible = _ref$visible === void 0 ? false : _ref$visible,
      wrapperProps = _objectWithoutProperties(_ref, _excluded);

  var id = (0, _useId.useId)();
  var wrapper = (0, _react.useRef)();

  var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      positionCoords = _useState2[0],
      setPositionCoords = _useState2[1];

  var _useState3 = (0, _react.useState)(position),
      _useState4 = _slicedToArray(_useState3, 2),
      adjustedPosition = _useState4[0],
      setAdjustedPosition = _useState4[1];

  var hasToggle = hasToggleIcon || toggleLabel; // Update the coordinates of the position node.

  var updatePositionCoords = (0, _react.useCallback)(function () {
    var parent = getPositionNode(wrapper.current, positionNode);

    if (!parent) {
      return null;
    }

    setPositionCoords(parent.getBoundingClientRect());
  }, [wrapper, positionNode]);

  var _usePortal = (0, _reactUseportal.default)({
    closeOnEsc: closeOnEsc,
    closeOnOutsideClick: closeOnOutsideClick,
    isOpen: visible,
    onOpen: function onOpen() {
      // Call the toggle callback, if supplied.
      onToggleMenu && onToggleMenu(true); // When the menu opens then update the coordinates of the parent.

      updatePositionCoords();
    },
    onClose: function onClose() {
      // Call the toggle callback, if supplied.
      onToggleMenu && onToggleMenu(false);
    }
  }),
      openPortal = _usePortal.openPortal,
      closePortal = _usePortal.closePortal,
      isOpen = _usePortal.isOpen,
      Portal = _usePortal.Portal,
      ref = _usePortal.ref;

  var previousVisible = (0, _hooks.usePrevious)(visible);
  var labelNode = toggleLabel ? /*#__PURE__*/_react.default.createElement("span", null, toggleLabel) : null;
  var wrapperClass = (0, _classnames.default)(className, "p-contextual-menu", _defineProperty({}, "p-contextual-menu--".concat(adjustedPosition), adjustedPosition !== "right")); // Update the coordinates of the wrapper once it mounts to the dom. This uses
  // The callback ref pattern:
  // https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node

  var wrapperRef = (0, _react.useCallback)(function (node) {
    wrapper.current = node;

    if (node !== null) {
      updatePositionCoords();
    }
  }, [updatePositionCoords]); // Handle controlling updates to the menu visibility from outside
  // the component.

  (0, _react.useEffect)(function () {
    if (visible !== previousVisible) {
      if (visible && !isOpen) {
        openPortal();
      } else if (!visible && isOpen) {
        closePortal();
      }
    }
  }, [closePortal, openPortal, visible, isOpen, previousVisible]);
  var onResize = (0, _react.useCallback)(function (evt) {
    var parent = getPositionNode(wrapper.current, positionNode);

    if (parent && !getPositionNodeVisible(parent)) {
      // Hide the menu if the item has become hidden. This might happen in
      // a responsive table when columns become hidden as the page
      // becomes smaller.
      closePortal(evt);
    } else {
      // Update the coordinates so that the menu stays relative to the
      // toggle button.
      updatePositionCoords();
    }
  }, [closePortal, positionNode, updatePositionCoords]);
  (0, _hooks.useListener)(window, onResize, "resize", true, isOpen);
  return /*#__PURE__*/_react.default.createElement("span", _extends({
    className: wrapperClass,
    ref: wrapperRef,
    style: positionNode ? null : {
      position: "relative"
    }
  }, wrapperProps), hasToggle ? /*#__PURE__*/_react.default.createElement(_Button.default, _extends({
    appearance: toggleAppearance,
    "aria-controls": id,
    "aria-expanded": isOpen ? "true" : "false",
    "aria-pressed": isOpen ? "true" : "false",
    "aria-haspopup": "true",
    className: (0, _classnames.default)("p-contextual-menu__toggle", toggleClassName),
    disabled: toggleDisabled,
    hasIcon: hasToggleIcon,
    onClick: function onClick(evt) {
      if (!isOpen) {
        openPortal(evt);
      } else {
        closePortal(evt);
      }
    },
    type: "button"
  }, toggleProps), toggleLabelFirst ? labelNode : null, hasToggleIcon ? /*#__PURE__*/_react.default.createElement("i", {
    className: (0, _classnames.default)("p-icon--chevron-down p-contextual-menu__indicator", {
      "is-light": ["negative", "positive"].includes(toggleAppearance)
    })
  }) : null, toggleLabelFirst ? null : labelNode) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
    style: {
      display: "none"
    },
    ref: ref
  })), isOpen && /*#__PURE__*/_react.default.createElement(Portal, null, /*#__PURE__*/_react.default.createElement(_ContextualMenuDropdown.default, _extends({
    adjustedPosition: adjustedPosition,
    autoAdjust: autoAdjust,
    closePortal: closePortal,
    constrainPanelWidth: constrainPanelWidth,
    dropdownClassName: dropdownClassName,
    dropdownContent: children,
    id: id,
    isOpen: isOpen,
    links: links,
    position: position,
    positionCoords: positionCoords,
    positionNode: getPositionNode(wrapper.current, positionNode),
    setAdjustedPosition: setAdjustedPosition,
    wrapperClass: wrapperClass
  }, dropdownProps))));
};

var _default = ContextualMenu;
exports.default = _default;