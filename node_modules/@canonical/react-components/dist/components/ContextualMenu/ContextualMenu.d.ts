import type { HTMLProps, ReactNode } from "react";
import type { ButtonProps } from "../Button";
import type { ContextualMenuDropdownProps } from "./ContextualMenuDropdown";
import type { MenuLink, Position } from "./ContextualMenuDropdown";
import { ClassName, PropsWithSpread, SubComponentProps } from "../../types";
/**
 * The props for the ContextualMenu component.
 * @template L - The type of the link props.
 */
export declare type Props<L> = PropsWithSpread<{
    /**
     * Whether the menu should adjust to fit in the screen.
     */
    autoAdjust?: boolean;
    /**
     * The menu content (if the links prop is not supplied).
     */
    children?: ReactNode;
    /**
     * An optional class to apply to the wrapping element.
     */
    className?: ClassName;
    /**
     * Whether the menu should close when the escape key is pressed.
     */
    closeOnEsc?: boolean;
    /**
     * Whether the menu should close when clicking outside the menu.
     */
    closeOnOutsideClick?: boolean;
    /**
     * Whether the menu's width should match the toggle's width.
     */
    constrainPanelWidth?: boolean;
    /**
     * An optional class to apply to the dropdown.
     */
    dropdownClassName?: string | null;
    /**
     * Additional props to pass to the dropdown.
     */
    dropdownProps?: SubComponentProps<ContextualMenuDropdownProps>;
    /**
     * Whether the toggle should display a chevron icon.
     */
    hasToggleIcon?: boolean;
    /**
     * A list of links to display in the menu (if the children prop is not supplied.)
     */
    links?: MenuLink<L>[] | null;
    /**
     * A function to call when the menu is toggled.
     */
    onToggleMenu?: (isOpen: boolean) => void | null;
    /**
     * The position of the menu.
     */
    position?: Position | null;
    /**
     * An element to make the menu relative to.
     */
    positionNode?: HTMLElement | null;
    /**
     * The appearance of the toggle button.
     */
    toggleAppearance?: ButtonProps["appearance"] | null;
    /**
     * A class to apply to the toggle button.
     */
    toggleClassName?: string | null;
    /**
     * Whether the toggle button should be disabled.
     */
    toggleDisabled?: boolean;
    /**
     * The toggle button's label.
     */
    toggleLabel?: string | null;
    /**
     * Whether the toggle lable or icon should appear first.
     */
    toggleLabelFirst?: boolean;
    /**
     * Additional props to pass to the toggle button.
     */
    toggleProps?: SubComponentProps<ButtonProps>;
    /**
     * Whether the menu should be visible.
     */
    visible?: boolean;
}, HTMLProps<HTMLSpanElement>>;
/**
 * A component for the Vanilla contextual menu.
 * @template L - The type of the link props.
 * @param [autoAdjust=true] - Whether the menu should adjust to fit in the screen.
 * @param children - The menu content (if the links prop is not supplied).
 * @param className - An optional class to apply to the wrapping element.
 * @param [closeOnEsc=true] - Whether the menu should close when the escape key is pressed.
 * @param [closeOnOutsideClick=true] - Whether the menu should close when clicking outside the menu.
 * @param constrainPanelWidth - Whether the menu's width should match the toggle's width.
 * @param dropdownClassName - An optional class to apply to the dropdown.
 * @param hasToggleIcon - Whether the toggle should display a chevron icon.
 * @param links - A list of links to display in the menu (if the children prop is not supplied.)
 * @param onToggleMenu - A function to call when the menu is toggled.
 * @param [position="right"] - The position of the menu.
 * @param positionNode - An element to make the menu relative to.
 * @param toggleAppearance - The appearance of the toggle button.
 * @param toggleClassName - An class to apply to the toggle button.
 * @param toggleDisabled - Whether the toggle button should be disabled.
 * @param toggleLabel - The toggle button's label.
 * @param [toggleLabelFirst=true] - Whether the toggle lable or icon should appear first.
 * @param [visible=false] - Whether the menu should be visible.
 */
declare const ContextualMenu: <L>({ autoAdjust, children, className, closeOnEsc, closeOnOutsideClick, constrainPanelWidth, dropdownClassName, dropdownProps, hasToggleIcon, links, onToggleMenu, position, positionNode, toggleAppearance, toggleClassName, toggleDisabled, toggleLabel, toggleLabelFirst, toggleProps, visible, ...wrapperProps }: Props<L>) => JSX.Element;
export default ContextualMenu;
