"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.adjustForWindow = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("../../../hooks");

var _Button = _interopRequireDefault(require("../../Button"));

var _excluded = ["children", "className", "onClick"],
    _excluded2 = ["adjustedPosition", "autoAdjust", "closePortal", "constrainPanelWidth", "dropdownClassName", "dropdownContent", "id", "isOpen", "links", "position", "positionCoords", "positionNode", "setAdjustedPosition", "wrapperClass"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Calculate the styles for the menu.
 * @param position - The menu position.
 * @param positionCoords - The coordinates of the position node.
 * @param constrainPanelWidth - Whether the menu width should be constrained to the position width.
 */
var getPositionStyle = function getPositionStyle(position, positionCoords, constrainPanelWidth) {
  if (!positionCoords) {
    return null;
  }

  var height = positionCoords.height,
      left = positionCoords.left,
      top = positionCoords.top,
      width = positionCoords.width;
  var topPos = top + height + (window.scrollY || 0);
  var leftPos = left;

  switch (position) {
    case "left":
      leftPos = left;
      break;

    case "center":
      leftPos = left + width / 2;
      break;

    case "right":
      leftPos = left + width;
      break;

    default:
      break;
  }

  return _objectSpread({
    position: "absolute",
    left: leftPos,
    top: topPos
  }, constrainPanelWidth ? {
    width: width
  } : null);
};
/**
 * Calculate the adjusted position in relation to the window.
 * @param position - The requested position.
 * @param fitsWindow - The window fitment info.
 * @return The new position.
 */


var adjustForWindow = function adjustForWindow(position, fitsWindow) {
  var newPosition = position;

  if (!fitsWindow.fromRight.fitsLeft && newPosition === "right") {
    newPosition = "left";
  }

  if (!fitsWindow.fromLeft.fitsRight && newPosition === "left") {
    newPosition = "right";
  } // If the menu doesn't fit to the left or the right then center it.


  if (!fitsWindow.fromLeft.fitsRight && !fitsWindow.fromRight.fitsLeft && (newPosition === "left" || newPosition === "right")) {
    newPosition = "center";
  } // If the menu doesn't fit when centered then find a new position.


  if (newPosition === "center" && (!fitsWindow.fromCenter.fitsCentered.fitsRight || !fitsWindow.fromCenter.fitsCentered.fitsLeft)) {
    if (fitsWindow.fromLeft.fitsRight) {
      newPosition = "left";
    }

    if (fitsWindow.fromRight.fitsLeft) {
      newPosition = "right";
    }
  }

  return newPosition;
};
/**
 * Generate a menu link
 * @template L - The type of the link props.
 * @param link - A button
 * @param key - A key for the DOM.
 * @param closePortal - The function to close the portal.
 */


exports.adjustForWindow = adjustForWindow;

var generateLink = function generateLink(link, key, closePortal) {
  var children = link.children,
      className = link.className,
      onClick = link.onClick,
      props = _objectWithoutProperties(link, _excluded);

  return /*#__PURE__*/_react.default.createElement(_Button.default, _extends({
    className: (0, _classnames.default)("p-contextual-menu__link", className),
    key: key,
    onClick: onClick ? function (evt) {
      closePortal(evt.nativeEvent);
      onClick(evt);
    } : null
  }, props), children);
};

var ContextualMenuDropdown = function ContextualMenuDropdown(_ref) {
  var adjustedPosition = _ref.adjustedPosition,
      autoAdjust = _ref.autoAdjust,
      closePortal = _ref.closePortal,
      constrainPanelWidth = _ref.constrainPanelWidth,
      dropdownClassName = _ref.dropdownClassName,
      dropdownContent = _ref.dropdownContent,
      id = _ref.id,
      isOpen = _ref.isOpen,
      links = _ref.links,
      position = _ref.position,
      positionCoords = _ref.positionCoords,
      positionNode = _ref.positionNode,
      setAdjustedPosition = _ref.setAdjustedPosition,
      wrapperClass = _ref.wrapperClass,
      props = _objectWithoutProperties(_ref, _excluded2);

  var dropdown = (0, _react.useRef)();

  var _useState = (0, _react.useState)(getPositionStyle(adjustedPosition, positionCoords, constrainPanelWidth)),
      _useState2 = _slicedToArray(_useState, 2),
      positionStyle = _useState2[0],
      setPositionStyle = _useState2[1]; // Update the styles to position the menu.


  var updatePositionStyle = (0, _react.useCallback)(function () {
    setPositionStyle(getPositionStyle(adjustedPosition, positionCoords, constrainPanelWidth));
  }, [adjustedPosition, positionCoords, constrainPanelWidth]); // Update the position when the window fitment info changes.

  var onUpdateWindowFitment = (0, _react.useCallback)(function (fitsWindow) {
    setAdjustedPosition(adjustForWindow(position, fitsWindow));
  }, [position, setAdjustedPosition]); // Handle adjusting the position of the dropdown so that it remains on screen.

  (0, _hooks.useWindowFitment)(dropdown.current, positionNode, onUpdateWindowFitment, 0, isOpen && autoAdjust); // Update the styles when the position changes.

  (0, _react.useEffect)(function () {
    updatePositionStyle();
  }, [adjustedPosition, updatePositionStyle]);
  return /*#__PURE__*/_react.default.createElement("span", _extends({
    className: wrapperClass,
    style: positionStyle
  }, props), /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)("p-contextual-menu__dropdown", dropdownClassName),
    id: id,
    "aria-hidden": isOpen ? "false" : "true",
    "aria-label": "submenu",
    ref: dropdown,
    style: constrainPanelWidth && positionStyle !== null && positionStyle !== void 0 && positionStyle.width ? {
      width: positionStyle.width,
      minWidth: 0,
      maxWidth: "none"
    } : null
  }, dropdownContent ? dropdownContent : links.map(function (item, i) {
    if (Array.isArray(item)) {
      return /*#__PURE__*/_react.default.createElement("span", {
        className: "p-contextual-menu__group",
        key: i
      }, item.map(function (link, j) {
        return generateLink(link, j, closePortal);
      }));
    } else if (typeof item === "string") {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "p-contextual-menu__non-interactive",
        key: i
      }, item);
    }

    return generateLink(item, i, closePortal);
  })));
};

var _default = ContextualMenuDropdown;
exports.default = _default;