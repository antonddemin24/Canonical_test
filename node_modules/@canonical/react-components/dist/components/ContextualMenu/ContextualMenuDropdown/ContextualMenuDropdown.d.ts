import type { HTMLProps, ReactNode } from "react";
import type { ButtonProps } from "../../Button";
import type { WindowFitment } from "../../../hooks";
/**
 * The type of the menu links.
 * @template L - The type of the link props.
 */
export declare type MenuLink<L = null> = string | ButtonProps<L> | ButtonProps<L>[];
export declare type Position = "left" | "center" | "right";
/**
 * The props for the ContextualMenuDropdown component.
 * @template L - The type of the link props.
 */
export declare type Props<L = null> = {
    adjustedPosition?: Position;
    autoAdjust?: boolean;
    closePortal?: (evt?: MouseEvent) => void;
    constrainPanelWidth?: boolean;
    dropdownClassName?: string;
    dropdownContent?: ReactNode;
    id?: string;
    isOpen?: boolean;
    links?: MenuLink<L>[];
    position?: Position;
    positionCoords?: ClientRect;
    positionNode?: HTMLElement;
    setAdjustedPosition?: (position: Position) => void;
    wrapperClass?: string;
} & HTMLProps<HTMLSpanElement>;
/**
 * Calculate the adjusted position in relation to the window.
 * @param position - The requested position.
 * @param fitsWindow - The window fitment info.
 * @return The new position.
 */
export declare const adjustForWindow: (position: Position, fitsWindow: WindowFitment) => Position;
declare const ContextualMenuDropdown: <L>({ adjustedPosition, autoAdjust, closePortal, constrainPanelWidth, dropdownClassName, dropdownContent, id, isOpen, links, position, positionCoords, positionNode, setAdjustedPosition, wrapperClass, ...props }: Props<L>) => JSX.Element;
export default ContextualMenuDropdown;
