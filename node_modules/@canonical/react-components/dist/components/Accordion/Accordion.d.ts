import { HTMLProps } from "react";
import type { AccordionHeadings, AccordionSectionProps } from "../AccordionSection";
import type { ClassName, PropsWithSpread } from "../../types";
export declare type Section = AccordionSectionProps & {
    /**
     * An optional key for the section component. It will also be
     * used to track which section is selected.
     */
    key?: string | number;
};
export declare type Props = PropsWithSpread<{
    /**
     * Optional classes applied to the parent element.
     */
    className?: ClassName;
    /**
     * An optional value to set the expanded section. The value must match a
     * section key. This value will only set the expanded section on first render
     * if externallyControlled is not set to `true`.
     */
    expanded?: string;
    /**
     * Whether the expanded section will be controlled via external state.
     */
    externallyControlled?: boolean;
    /**
     * Optional function that is called when the expanded section is changed.
     * The function is provided the section title or null.
     */
    onExpandedChange?: (id: any, title: string) => void;
    /**
     * An array of sections and content.
     */
    sections: Section[];
    /**
     * Optional string describing heading element that should be used for the section titles.
     */
    titleElement?: AccordionHeadings;
}, HTMLProps<HTMLElement>>;
declare const Accordion: ({ className, expanded, externallyControlled, onExpandedChange, sections, titleElement, ...asideProps }: Props) => JSX.Element;
export default Accordion;
