import type { HTMLProps, ReactNode } from "react";
import type { ClassName, PropsWithSpread, SortDirection } from "../../types";
import type { TableProps } from "../Table";
import type { TableCellProps } from "../TableCell";
export declare type MainTableHeader = PropsWithSpread<{
    /**
     * The content of the table header.
     */
    content?: ReactNode;
    /**
     * Optional classes to apply to the table header.
     */
    className?: ClassName;
    /**
     * A key to sort the rows by. It should match a key given to the row `sortData`.
     */
    sortKey?: string | null;
    /**
     * Replacement value for data-heading if content is not a string.
     */
    heading?: string;
}, HTMLProps<HTMLTableHeaderCellElement>>;
export declare type MainTableCell = PropsWithSpread<{
    /**
     * The content of the table cell.
     */
    content?: ReactNode;
}, Omit<TableCellProps, "children">>;
export declare type MainTableRow = PropsWithSpread<{
    /**
     * Optional class(es) to apply to the row.
     */
    className?: ClassName;
    /**
     * The columns in this row.
     */
    columns?: MainTableCell[];
    /**
     * Whether this row should display as expanded.
     */
    expanded?: boolean;
    /**
     * The content to display when this column is expanded.
     */
    expandedContent?: ReactNode;
    /**
     * An optional key to identify this table row.
     */
    key?: number | string | null;
    /**
     * An object of data for use when sorting the rows. The keys of this object
     * should match the header sort keys.
     */
    sortData?: Record<string, unknown>;
}, HTMLProps<HTMLTableRowElement>>;
export declare type Props = PropsWithSpread<{
    /**
     * The default key to sort the rows by.
     */
    defaultSort?: MainTableHeader["sortKey"];
    /**
     * The default direction the row data should be sorted by.
     */
    defaultSortDirection?: SortDirection;
    /**
     * A message to display when there are no table rows.
     */
    emptyStateMsg?: ReactNode;
    /**
     * The header columns for this table.
     */
    headers?: MainTableHeader[];
    /**
     * A function that is called when the sort key is changed.
     */
    onUpdateSort?: (sortKey: MainTableHeader["sortKey"]) => void;
    /**
     * A number of rows to paginate by.
     */
    paginate?: number | null;
    /**
     * The rows to display in the table.
     */
    rows?: MainTableRow[];
    /**
     * Whether this table should be sortable.
     */
    sortable?: boolean;
    /**
     * A function to be used when sorting.
     */
    sortFunction?: (a: MainTableRow, b: MainTableRow, currentSortDirection: SortDirection, currentSortKey: MainTableHeader["sortKey"]) => -1 | 0 | 1;
}, TableProps>;
declare const MainTable: ({ defaultSort, defaultSortDirection, emptyStateMsg, expanding, headers, onUpdateSort, paginate, rows, responsive, sortable, sortFunction, ...props }: Props) => JSX.Element;
export default MainTable;
