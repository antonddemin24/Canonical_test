"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _PaginationButton = _interopRequireDefault(require("../PaginationButton"));

var _PaginationItem = _interopRequireDefault(require("../PaginationItem"));

var _excluded = ["itemsPerPage", "totalItems", "paginate", "currentPage", "scrollToTop", "truncateThreshold"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var scrollTop = function scrollTop() {
  return window.scrollTo(0, 0);
};

var generatePaginationItems = function generatePaginationItems(pageNumbers, currentPage, truncateThreshold, changePage) {
  var lastPage = pageNumbers.length;
  var truncated = lastPage > truncateThreshold;
  var visiblePages;

  if (truncated) {
    // the default range for pages outside the start and end threshold
    var start = currentPage - 2;
    var end = currentPage + 1; // on page 1, also show pages 2, 3 and 4

    if (currentPage === 1) {
      start = 1;
      end = currentPage + 3;
    } // on page 2, show page 1, and also pages 3, and 4


    if (currentPage === 2) {
      start = 1;
      end = currentPage + 2;
    } // on the last page and page before last, also show the 3 previous pages


    if (currentPage === lastPage || currentPage === lastPage - 1) {
      start = lastPage - 4;
      end = lastPage - 1;
    }

    visiblePages = pageNumbers.slice(start, end);
  } else {
    visiblePages = pageNumbers;
  }

  var items = [];

  if (truncated) {
    // render first in sequence
    items.push( /*#__PURE__*/_react.default.createElement(_PaginationItem.default, {
      key: 1,
      number: 1,
      isActive: currentPage === 1,
      onClick: function onClick() {
        return changePage(1);
      }
    }));

    if (![1, 2, 3].includes(currentPage)) {
      items.push( /*#__PURE__*/_react.default.createElement(PaginationItemSeparator, {
        key: "sep1"
      }));
    }
  }

  items.push(visiblePages.map(function (number) {
    return /*#__PURE__*/_react.default.createElement(_PaginationItem.default, {
      key: number,
      number: number,
      isActive: number === currentPage,
      onClick: function onClick() {
        return changePage(number);
      }
    });
  }));

  if (truncated) {
    // render last in sequence
    if (![lastPage, lastPage - 1, lastPage - 2].includes(currentPage)) {
      items.push( /*#__PURE__*/_react.default.createElement(PaginationItemSeparator, {
        key: "sep2"
      }));
    }

    items.push( /*#__PURE__*/_react.default.createElement(_PaginationItem.default, {
      key: lastPage,
      number: lastPage,
      isActive: currentPage === lastPage,
      onClick: function onClick() {
        return changePage(lastPage);
      }
    }));
  }

  return items;
};

var PaginationItemSeparator = function PaginationItemSeparator() {
  return /*#__PURE__*/_react.default.createElement("li", {
    className: "p-pagination__item p-pagination__item--truncation"
  }, "\u2026");
};

var Pagination = function Pagination(_ref) {
  var itemsPerPage = _ref.itemsPerPage,
      totalItems = _ref.totalItems,
      paginate = _ref.paginate,
      currentPage = _ref.currentPage,
      scrollToTop = _ref.scrollToTop,
      _ref$truncateThreshol = _ref.truncateThreshold,
      truncateThreshold = _ref$truncateThreshol === void 0 ? 10 : _ref$truncateThreshol,
      navProps = _objectWithoutProperties(_ref, _excluded);

  // return early if no pagination is required
  if (totalItems <= itemsPerPage) {
    return null;
  }

  var pageNumbers = [];

  for (var i = 1; i <= Math.ceil(totalItems / itemsPerPage); i++) {
    pageNumbers.push(i);
  }

  var changePage = function changePage(page) {
    paginate(page);
    scrollToTop && scrollTop();
  };

  return /*#__PURE__*/_react.default.createElement("nav", navProps, /*#__PURE__*/_react.default.createElement("ul", {
    className: "p-pagination"
  }, /*#__PURE__*/_react.default.createElement(_PaginationButton.default, {
    key: "back",
    direction: "back",
    disabled: currentPage === 1,
    onClick: function onClick() {
      return changePage(currentPage - 1);
    }
  }), generatePaginationItems(pageNumbers, currentPage, truncateThreshold, changePage), /*#__PURE__*/_react.default.createElement(_PaginationButton.default, {
    key: "forward",
    direction: "forward",
    disabled: currentPage === pageNumbers.length,
    onClick: function onClick() {
      return changePage(currentPage + 1);
    }
  })));
};

var _default = Pagination;
exports.default = _default;