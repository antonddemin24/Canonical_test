"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Slider = exports.FILLED_COLOR = exports.EMPTY_COLOR = void 0;

var _react = _interopRequireDefault(require("react"));

var _Field = _interopRequireDefault(require("../Field"));

var _hooks = require("../../hooks");

var _excluded = ["caution", "disabled", "error", "help", "id", "inputDisabled", "label", "max", "min", "onChange", "required", "showInput"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var FILLED_COLOR = "#0066CC";
exports.FILLED_COLOR = FILLED_COLOR;
var EMPTY_COLOR = "#D9D9D9";
exports.EMPTY_COLOR = EMPTY_COLOR;

var Slider = function Slider(_ref) {
  var _navigator, _navigator$userAgent;

  var caution = _ref.caution,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      error = _ref.error,
      help = _ref.help,
      id = _ref.id,
      _ref$inputDisabled = _ref.inputDisabled,
      inputDisabled = _ref$inputDisabled === void 0 ? false : _ref$inputDisabled,
      label = _ref.label,
      max = _ref.max,
      min = _ref.min,
      onChange = _ref.onChange,
      _ref$required = _ref.required,
      required = _ref$required === void 0 ? false : _ref$required,
      _ref$showInput = _ref.showInput,
      showInput = _ref$showInput === void 0 ? false : _ref$showInput,
      inputProps = _objectWithoutProperties(_ref, _excluded);

  var validationId = (0, _hooks.useId)();
  var helpId = (0, _hooks.useId)();
  var hasError = !!error;
  var style = {};

  if ((_navigator = navigator) !== null && _navigator !== void 0 && (_navigator$userAgent = _navigator.userAgent) !== null && _navigator$userAgent !== void 0 && _navigator$userAgent.includes("AppleWebKit")) {
    // Range inputs on Webkit browsers don't have a built-in "filled" portion,
    // so instead it is handled here as a background.
    var val = inputProps.value || inputProps.defaultValue;
    var filledPercentage = "".concat((Number(val) - min) / (max - min) * 100, "%");
    style = {
      background: "linear-gradient(\n        to right,\n        ".concat(FILLED_COLOR, " 0%,\n        ").concat(FILLED_COLOR, " ").concat(filledPercentage, ",\n        ").concat(EMPTY_COLOR, " ").concat(filledPercentage, ",\n        ").concat(EMPTY_COLOR, " 100%\n      )")
    };
  }

  return /*#__PURE__*/_react.default.createElement(_Field.default, {
    caution: caution,
    error: error,
    help: help,
    helpId: helpId,
    label: label,
    required: required,
    validationId: validationId
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "p-slider__wrapper"
  }, /*#__PURE__*/_react.default.createElement("input", _extends({
    "aria-describedby": help ? helpId : null,
    "aria-errormessage": hasError ? validationId : null,
    "aria-invalid": hasError,
    disabled: disabled,
    id: id,
    max: max,
    min: min,
    onChange: onChange,
    required: required,
    style: style,
    type: "range"
  }, inputProps)), showInput && /*#__PURE__*/_react.default.createElement("input", _extends({
    "aria-describedby": help ? helpId : null,
    "aria-errormessage": hasError ? validationId : null,
    "aria-invalid": hasError,
    className: "p-slider__input",
    disabled: disabled || inputDisabled,
    max: max,
    min: min,
    onChange: onChange,
    type: "number"
  }, inputProps))));
};

exports.Slider = Slider;
var _default = Slider;
exports.default = _default;