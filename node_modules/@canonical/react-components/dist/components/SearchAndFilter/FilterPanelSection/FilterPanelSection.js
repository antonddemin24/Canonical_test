"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _Chip = _interopRequireDefault(require("../../Chip"));

var _utils = require("../utils");

var _utils2 = require("../../../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var FilterPanelSection = function FilterPanelSection(_ref) {
  var data = _ref.data,
      searchData = _ref.searchData,
      _ref$searchTerm = _ref.searchTerm,
      searchTerm = _ref$searchTerm === void 0 ? "" : _ref$searchTerm,
      sectionHidden = _ref.sectionHidden,
      toggleSelected = _ref.toggleSelected;
  var chips = data.chips,
      heading = data.heading;

  var _useState = (0, _react.useState)(0),
      _useState2 = _slicedToArray(_useState, 2),
      overflowCounter = _useState2[0],
      setOverflowCounter = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      expanded = _useState4[0],
      setExpanded = _useState4[1];

  var chipWrapper = (0, _react.useRef)(null);

  var handleChipClick = function handleChipClick(chip) {
    toggleSelected(chip);
  }; // If the offsetTop is more than double height of a single chip, consider it
  // overflowing


  var updateFlowCount = function updateFlowCount() {
    var _chipWrapper$current;

    var chips = chipWrapper === null || chipWrapper === void 0 ? void 0 : (_chipWrapper$current = chipWrapper.current) === null || _chipWrapper$current === void 0 ? void 0 : _chipWrapper$current.querySelectorAll(".p-chip");
    var overflowCount = (0, _utils.overflowingChipsCount)(chips, 2);
    setOverflowCounter(overflowCount);
  }; // Check if search term characters matches any characters in panel heading


  var searchTermInHeading = (0, _utils2.highlightSubString)(heading, searchTerm).match; // Serialise chip values into string so it can be interrogated with subString

  var chipValues = [];
  Object.entries(chips).forEach(function (chipValue) {
    chipValues.push(chipValue[1].value);
  }); // Search chips for character match with search term

  var searchTermInChips = (0, _utils2.highlightSubString)(chipValues.toString(), searchTerm).match;
  var panelSectionVisible = searchTermInHeading || searchTermInChips || searchTerm === ""; // Update overflow count when component is resized

  (0, _react.useEffect)(function () {
    var resizeObserverSupported = typeof ResizeObserver !== "undefined";
    var wrapper = chipWrapper === null || chipWrapper === void 0 ? void 0 : chipWrapper.current;
    var wrapperWidthObserver;

    if (resizeObserverSupported && panelSectionVisible) {
      wrapperWidthObserver = new ResizeObserver(function () {
        updateFlowCount();
      });
      wrapperWidthObserver.observe(wrapper);
    } else {
      updateFlowCount();
    }

    return function () {
      var _wrapperWidthObserver;

      resizeObserverSupported && ((_wrapperWidthObserver = wrapperWidthObserver) === null || _wrapperWidthObserver === void 0 ? void 0 : _wrapperWidthObserver.disconnect());
    };
  }, [panelSectionVisible]); // When overflow counter is clicked, all chips are shown

  var showAllChips = function showAllChips() {
    setExpanded(true);
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, panelSectionVisible && /*#__PURE__*/_react.default.createElement("div", {
    className: "p-filter-panel-section"
  }, heading && chips.length > 0 && /*#__PURE__*/_react.default.createElement("h3", {
    className: "p-filter-panel-section__heading",
    dangerouslySetInnerHTML: {
      __html: (0, _utils2.highlightSubString)(heading, searchTerm).text
    }
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "p-filter-panel-section__chips",
    "aria-expanded": expanded,
    ref: chipWrapper
  }, chips === null || chips === void 0 ? void 0 : chips.map(function (chip) {
    // If search term has been added to input, only matching chips
    // should display
    var searchTermInChip = (0, _utils2.highlightSubString)(chip.value, searchTerm).match;
    var chipVisible = searchTermInChip || searchTerm === "" || (0, _utils2.highlightSubString)(heading, searchTerm).match;
    return chipVisible && !sectionHidden && /*#__PURE__*/_react.default.createElement(_Chip.default, {
      key: "".concat(chip.lead, "+").concat(chip.value),
      lead: chip.lead,
      value: chip.value,
      selected: (0, _utils.isChipInArray)(chip, searchData),
      subString: searchTerm,
      onClick: function onClick() {
        return handleChipClick(chip);
      }
    });
  }), overflowCounter > 0 && !expanded && /*#__PURE__*/_react.default.createElement("span", {
    className: "p-filter-panel-section__counter",
    onClick: showAllChips,
    onKeyPress: showAllChips,
    tabIndex: 0
  }, "+", overflowCounter))));
};

FilterPanelSection.propTypes = {
  searchData: _propTypes.default.array.isRequired,
  searchTerm: _propTypes.default.string.isRequired,
  sectionHidden: _propTypes.default.bool,
  toggleSelected: _propTypes.default.func.isRequired
};
var _default = FilterPanelSection;
exports.default = _default;