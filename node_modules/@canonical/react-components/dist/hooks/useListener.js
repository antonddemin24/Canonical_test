"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useListener = void 0;

var _react = require("react");

var _useThrottle = require("./useThrottle");

var _usePrevious = require("./usePrevious");

/**
 * A hook that handles attaching/removing listeners and smartly reattaching if
 * any of the attributes change.
 * @param targetNode The node to attach the listener to.
 * @param callback The function to call from the listener.
 * @param eventType The event name.
 * @param shouldThrottle Whether the callback calls should be throttled.
 * @param shouldListen When the listener should be active.
 */
var useListener = function useListener(targetNode, callback, eventType) {
  var shouldThrottle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var shouldListen = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
  var isListening = (0, _react.useRef)(false);
  var throttle = (0, _useThrottle.useThrottle)(callback);
  var eventListener = (0, _react.useRef)(shouldThrottle ? throttle : callback);
  var previousEventType = (0, _usePrevious.usePrevious)(eventType);
  var previousShouldThrottle = (0, _usePrevious.usePrevious)(shouldThrottle);
  var previousTargetNode = (0, _usePrevious.usePrevious)(targetNode);
  var previousCallback = (0, _usePrevious.usePrevious)(callback);
  (0, _react.useEffect)(function () {
    // If any of the props related to the attached listener changed then the
    // listener needs to be re-attached.
    var listenerAttributesChanged = callback !== previousCallback || eventType !== previousEventType || shouldThrottle !== previousShouldThrottle || targetNode !== previousTargetNode;

    if (isListening.current && (!shouldListen || listenerAttributesChanged)) {
      previousTargetNode.removeEventListener(previousEventType, eventListener.current);
      isListening.current = false;
    }

    if (shouldThrottle !== previousShouldThrottle || callback !== previousCallback) {
      // Set the listener to the callback, or used the throttled callback.
      eventListener.current = shouldThrottle ? throttle : callback;
    }

    if (targetNode && shouldListen && !isListening.current) {
      targetNode.addEventListener(eventType, eventListener.current);
      isListening.current = true;
    }
  }, [callback, eventType, previousCallback, previousEventType, previousShouldThrottle, previousTargetNode, shouldListen, shouldThrottle, targetNode, throttle]);
  (0, _react.useEffect)(function () {
    return function () {
      // Unattach the listener if the component gets unmounted while
      // listening.
      if (targetNode && isListening.current) {
        targetNode.removeEventListener(eventType, eventListener.current);
      }
    };
  }, [eventType, targetNode]);
};

exports.useListener = useListener;