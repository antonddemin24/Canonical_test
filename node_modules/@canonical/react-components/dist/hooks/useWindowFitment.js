"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useWindowFitment = void 0;

var _react = require("react");

var _useListener = require("./useListener");

/**
 * A hook to determine if an element fits on the window.
 * @param targetNode The element to try and fit on the window.
 * @param referenceNode The element to use to position the target.
 * @param callback The function to call when updating fitment info.
 * @param spacer An additional space to leave between the target and reference.
 * @param shouldCheck Whether the fitment info should be being checked.
 * @param fromMouse Whether the target should be being positioned in relation
 *                  to the mouse. In this case refernceNode will be used to
 *                  listen for mouseover events.
 */
var useWindowFitment = function useWindowFitment(targetNode, referenceNode, callback) {
  var spacer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var shouldCheck = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
  var fromMouse = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  var htmlRef = (0, _react.useRef)(document.querySelector("html"));
  var update = (0, _react.useCallback)(function (evt) {
    var referenceCoordinates;

    if (fromMouse) {
      if (evt) {
        referenceCoordinates = {
          // The mouse is a single point so use 0 for the height and width.
          height: 0,
          left: evt.x || 0,
          top: evt.y || 0,
          width: 0
        };
      }
    } else if (referenceNode) {
      referenceCoordinates = referenceNode.getBoundingClientRect();
    }

    if (shouldCheck && targetNode && referenceCoordinates) {
      var _targetNode$getBoundi = targetNode.getBoundingClientRect(),
          targetHeight = _targetNode$getBoundi.height,
          targetWidth = _targetNode$getBoundi.width;

      var _referenceCoordinates = referenceCoordinates,
          referenceHeight = _referenceCoordinates.height,
          referenceLeft = _referenceCoordinates.left,
          referenceTop = _referenceCoordinates.top,
          referenceWidth = _referenceCoordinates.width;
      var referenceBottom = referenceTop + referenceHeight;
      var referenceRight = referenceLeft + referenceWidth;
      var referenceCenterX = referenceLeft + referenceWidth / 2;
      var referenceCenterY = referenceTop + referenceHeight / 2;
      var windowLeft = htmlRef.current.scrollLeft;
      var windowRight = window.innerWidth - htmlRef.current.scrollLeft;
      var windowTop = 0;
      var windowBottom = window.innerHeight;
      var heightIncludingSpace = targetHeight + spacer;
      var widthIncludingSpace = targetWidth + spacer;
      var widthFromCenter = targetWidth / 2;
      var heightFromCenter = targetHeight / 2;
      callback({
        fromTop: {
          fitsAbove: referenceTop - heightIncludingSpace > windowTop,
          fitsBelow: referenceTop + heightIncludingSpace < windowBottom
        },
        fromBottom: {
          fitsAbove: referenceBottom - heightIncludingSpace > windowTop,
          fitsBelow: referenceBottom + heightIncludingSpace < windowBottom
        },
        fromLeft: {
          fitsLeft: referenceLeft - widthIncludingSpace > windowLeft,
          fitsRight: referenceLeft + widthIncludingSpace < windowRight
        },
        fromRight: {
          fitsLeft: referenceRight - widthIncludingSpace > windowLeft,
          fitsRight: referenceRight + widthIncludingSpace < windowRight
        },
        fromCenter: {
          fitsLeft: referenceCenterX - widthIncludingSpace > windowLeft,
          fitsRight: referenceCenterX + widthIncludingSpace < windowRight,
          fitsAbove: referenceCenterY - heightIncludingSpace > windowTop,
          fitsBelow: referenceCenterY + heightIncludingSpace < windowBottom,
          fitsCentered: {
            fitsLeft: referenceCenterX - widthFromCenter > windowLeft,
            fitsRight: referenceCenterX + widthFromCenter < windowRight,
            fitsAbove: referenceCenterY - heightFromCenter > windowTop,
            fitsBelow: referenceCenterY + heightFromCenter < windowBottom
          }
        }
      });
    }
  }, [shouldCheck, targetNode, callback, spacer, fromMouse, referenceNode]);
  (0, _useListener.useListener)(window, update, "resize", true, shouldCheck && !fromMouse);
  (0, _useListener.useListener)(window, update, "scroll", true, shouldCheck && !fromMouse);
  (0, _useListener.useListener)(referenceNode, update, "mousemove", true, fromMouse && shouldCheck);
  (0, _react.useEffect)(function () {
    if (!fromMouse) {
      update();
    }
  }, [fromMouse, update]);
};

exports.useWindowFitment = useWindowFitment;