export declare type WindowFitment = {
    fromTop: {
        fitsAbove: boolean;
        fitsBelow: boolean;
    };
    fromBottom: {
        fitsAbove: boolean;
        fitsBelow: boolean;
    };
    fromLeft: {
        fitsLeft: boolean;
        fitsRight: boolean;
    };
    fromRight: {
        fitsLeft: boolean;
        fitsRight: boolean;
    };
    fromCenter: {
        fitsLeft: boolean;
        fitsRight: boolean;
        fitsAbove: boolean;
        fitsBelow: boolean;
        fitsCentered: {
            fitsAbove: boolean;
            fitsBelow: boolean;
            fitsLeft: boolean;
            fitsRight: boolean;
        };
    };
};
/**
 * A hook to determine if an element fits on the window.
 * @param targetNode The element to try and fit on the window.
 * @param referenceNode The element to use to position the target.
 * @param callback The function to call when updating fitment info.
 * @param spacer An additional space to leave between the target and reference.
 * @param shouldCheck Whether the fitment info should be being checked.
 * @param fromMouse Whether the target should be being positioned in relation
 *                  to the mouse. In this case refernceNode will be used to
 *                  listen for mouseover events.
 */
export declare const useWindowFitment: (targetNode: HTMLElement, referenceNode: HTMLElement, callback: (fitsWindow: WindowFitment) => void, spacer?: number, shouldCheck?: boolean, fromMouse?: boolean) => void;
