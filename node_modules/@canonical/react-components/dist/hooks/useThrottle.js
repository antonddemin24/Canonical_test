"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useThrottle = exports.THROTTLE_DELAY = void 0;

var _react = require("react");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var THROTTLE_DELAY = 1000 / 60;
exports.THROTTLE_DELAY = THROTTLE_DELAY;

// eslint-disable-line @typescript-eslint/no-explicit-any

/**
 * A hook to handle throttling calls to a function.
 * @param callback The function to throttle.
 * @param delay The throttle delay in ms.
 * @return The callback function wrapped in the throttle.
 */
var useThrottle = function useThrottle(callback) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROTTLE_DELAY;
  var timeout = (0, _react.useRef)();
  var lastCall = (0, _react.useRef)();
  var lastArgs = (0, _react.useRef)(null);
  var throttle = (0, _react.useCallback)(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    lastArgs.current = args;

    var callCallback = function callCallback() {
      callback.apply(void 0, _toConsumableArray(lastArgs.current));
      lastCall.current = Date.now();
      timeout.current = null;
    };

    var createTimeout = function createTimeout() {
      timeout.current = window.setTimeout(function () {
        callCallback();
        timeout.current = null;
      }, delay);
    };

    if (!lastCall.current) {
      // Initially call the callback and start a timeout for the next call.
      callCallback();
      createTimeout();
    } else if (!timeout.current && Date.now() - lastCall.current > delay) {
      // If a timeout isn't active then create a new one if the delay time
      // has elapsed.
      createTimeout();
    }
  }, [callback, delay]);
  (0, _react.useEffect)(function () {
    return function () {
      // Clear the timeout when unmounting.
      if (timeout.current) {
        clearTimeout(timeout.current);
      }
    };
  }, []);
  return throttle;
};

exports.useThrottle = useThrottle;