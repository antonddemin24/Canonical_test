"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePagination = usePagination;

var _react = require("react");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * A hook that handles pagination.
 * @param data - The data array to paginate.
 * @param {Object} options
 * @param {number} [options.itemsPerPage] - Number of items per page. Returns all items if no value has been provided.
 * @param {number} [options.initialPage=1] - Initial page number. Defaults to 1.
 * @param {boolean} [options.autoResetPage=false] - Whether to reset the page number to 1 when the data changes.
 */
function usePagination(data, options) {
  var _data$length;

  var defaultOptions = {
    initialPage: 1,
    autoResetPage: false
  };

  var _Object$assign = Object.assign(defaultOptions, options),
      itemsPerPage = _Object$assign.itemsPerPage,
      initialPage = _Object$assign.initialPage,
      autoResetPage = _Object$assign.autoResetPage;

  var totalItems = (_data$length = data === null || data === void 0 ? void 0 : data.length) !== null && _data$length !== void 0 ? _data$length : 0;
  var initialPageIndex = initialPage > 0 ? initialPage - 1 : 0;

  var _useState = (0, _react.useState)(initialPageIndex),
      _useState2 = _slicedToArray(_useState, 2),
      pageIndex = _useState2[0],
      setPageIndex = _useState2[1];

  var startIndex = typeof itemsPerPage === "number" ? pageIndex * itemsPerPage : 0;

  var paginate = function paginate(pageNumber) {
    return setPageIndex(pageNumber - 1);
  };

  (0, _react.useEffect)(function () {
    if (typeof itemsPerPage === "number" && startIndex >= totalItems) {
      !autoResetPage && Math.floor(totalItems / itemsPerPage) > 0 ? // go to the last available page if the current page is out of bounds
      setPageIndex(Math.floor(totalItems / itemsPerPage) - 1) : // go to the initial page if autoResetPage is true
      setPageIndex(0);
    }
  }, [pageIndex, startIndex, setPageIndex, totalItems, itemsPerPage, autoResetPage]);
  var pageData = (0, _react.useMemo)(function () {
    return typeof itemsPerPage === "number" ? data === null || data === void 0 ? void 0 : data.slice(startIndex, startIndex + itemsPerPage) : data;
  }, [startIndex, data, itemsPerPage]);
  return {
    pageData: pageData,
    currentPage: pageIndex + 1,
    paginate: paginate,
    itemsPerPage: itemsPerPage,
    totalItems: totalItems
  };
}