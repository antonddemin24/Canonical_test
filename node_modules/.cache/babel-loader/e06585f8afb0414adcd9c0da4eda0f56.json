{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.overflowingChipsCount = exports.isChipInArray = void 0;\n/**\n * Return number of overflowing chips given a row threshold\n * @param {array} chips - An array of chips\n * @param {Integer} overflowRowLimit - Number of rows to show before counting\n * overflow\n */\n\nvar overflowingChipsCount = function overflowingChipsCount(chips, overflowRowLimit) {\n  var overflowChips = 0;\n\n  if (chips) {\n    chips.forEach(function (chip) {\n      if (chip.offsetTop > chip.offsetHeight * overflowRowLimit) overflowChips++;\n    });\n  }\n\n  return overflowChips;\n};\n/**\n * Check if supplied chip object already exists in searchData prop\n * @param {Object} chip - A chip object {lead: 'foo', value: 'bar'}\n * @param {Array} existingArr - An array of chip objects\n */\n\n\nexports.overflowingChipsCount = overflowingChipsCount;\n\nvar isChipInArray = function isChipInArray(chip, existingArr) {\n  return existingArr === null || existingArr === void 0 ? void 0 : existingArr.some(function (searchDataItem) {\n    return searchDataItem.lead === chip.lead && searchDataItem.value === chip.value;\n  });\n};\n\nexports.isChipInArray = isChipInArray;","map":{"version":3,"names":["Object","defineProperty","exports","value","overflowingChipsCount","isChipInArray","chips","overflowRowLimit","overflowChips","forEach","chip","offsetTop","offsetHeight","existingArr","some","searchDataItem","lead"],"sources":["/Users/antondemin/ReactProjects/Canonical_test/canonical_test/node_modules/@canonical/react-components/dist/components/SearchAndFilter/utils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.overflowingChipsCount = exports.isChipInArray = void 0;\n\n/**\n * Return number of overflowing chips given a row threshold\n * @param {array} chips - An array of chips\n * @param {Integer} overflowRowLimit - Number of rows to show before counting\n * overflow\n */\nvar overflowingChipsCount = function overflowingChipsCount(chips, overflowRowLimit) {\n  var overflowChips = 0;\n\n  if (chips) {\n    chips.forEach(function (chip) {\n      if (chip.offsetTop > chip.offsetHeight * overflowRowLimit) overflowChips++;\n    });\n  }\n\n  return overflowChips;\n};\n/**\n * Check if supplied chip object already exists in searchData prop\n * @param {Object} chip - A chip object {lead: 'foo', value: 'bar'}\n * @param {Array} existingArr - An array of chip objects\n */\n\n\nexports.overflowingChipsCount = overflowingChipsCount;\n\nvar isChipInArray = function isChipInArray(chip, existingArr) {\n  return existingArr === null || existingArr === void 0 ? void 0 : existingArr.some(function (searchDataItem) {\n    return searchDataItem.lead === chip.lead && searchDataItem.value === chip.value;\n  });\n};\n\nexports.isChipInArray = isChipInArray;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,qBAAR,GAAgCF,OAAO,CAACG,aAAR,GAAwB,KAAK,CAA7D;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAID,qBAAqB,GAAG,SAASA,qBAAT,CAA+BE,KAA/B,EAAsCC,gBAAtC,EAAwD;EAClF,IAAIC,aAAa,GAAG,CAApB;;EAEA,IAAIF,KAAJ,EAAW;IACTA,KAAK,CAACG,OAAN,CAAc,UAAUC,IAAV,EAAgB;MAC5B,IAAIA,IAAI,CAACC,SAAL,GAAiBD,IAAI,CAACE,YAAL,GAAoBL,gBAAzC,EAA2DC,aAAa;IACzE,CAFD;EAGD;;EAED,OAAOA,aAAP;AACD,CAVD;AAWA;AACA;AACA;AACA;AACA;;;AAGAN,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC;;AAEA,IAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBK,IAAvB,EAA6BG,WAA7B,EAA0C;EAC5D,OAAOA,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACC,IAAZ,CAAiB,UAAUC,cAAV,EAA0B;IAC1G,OAAOA,cAAc,CAACC,IAAf,KAAwBN,IAAI,CAACM,IAA7B,IAAqCD,cAAc,CAACZ,KAAf,KAAyBO,IAAI,CAACP,KAA1E;EACD,CAFgE,CAAjE;AAGD,CAJD;;AAMAD,OAAO,CAACG,aAAR,GAAwBA,aAAxB"},"metadata":{},"sourceType":"script"}